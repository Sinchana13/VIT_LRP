{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8822620,"sourceType":"datasetVersion","datasetId":5307735}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"rm -rf /kaggle/working/*\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T05:59:34.955887Z","iopub.execute_input":"2024-09-24T05:59:34.956575Z","iopub.status.idle":"2024-09-24T05:59:35.967876Z","shell.execute_reply.started":"2024-09-24T05:59:34.956542Z","shell.execute_reply":"2024-09-24T05:59:35.966607Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import os\nimport torch\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader\n\n# Define the path to the dataset\ndata_dir = '/kaggle/input/vit-dataset/FETAL_PLANES_ZENODO'\n\n# Define transformations for the training and validation sets\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),  # Resize images to 224x224\n    transforms.ToTensor(),  # Convert images to PyTorch tensors\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  # Normalize with ImageNet means and stds\n])\n\n# Create the dataset\ndataset = datasets.ImageFolder(root=data_dir, transform=transform)\n\n# Split the dataset into training and validation sets\ntrain_size = int(0.8 * len(dataset))\nval_size = len(dataset) - train_size\ntrain_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_size, val_size])\n\n# Create DataLoaders for training and validation sets\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=4)\nval_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=4)\n\n# Check the class names\nprint(dataset.classes)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T05:59:35.970202Z","iopub.execute_input":"2024-09-24T05:59:35.970517Z","iopub.status.idle":"2024-09-24T05:59:47.322718Z","shell.execute_reply.started":"2024-09-24T05:59:35.970480Z","shell.execute_reply":"2024-09-24T05:59:47.321740Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nimport shutil\nfrom sklearn.model_selection import train_test_split\nfrom collections import Counter\nimport random\nfrom PIL import Image\nimport torchvision.transforms as transforms\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\n\n# Define the path to the dataset\ndata_dir = '/kaggle/input/vit-dataset/FETAL_PLANES_ZENODO'\noutput_dir = '/kaggle/working/data_split'\n\n# Define the class names\nclass_names = ['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n\n# Create output directories for training and testing sets\ntrain_dir = os.path.join(output_dir, 'train')\ntest_dir = os.path.join(output_dir, 'test')\nos.makedirs(train_dir, exist_ok=True)\nos.makedirs(test_dir, exist_ok=True)\n\n# Function to create directories if they don't exist\ndef create_class_dirs(base_dir):\n    for class_name in class_names:\n        os.makedirs(os.path.join(base_dir, class_name), exist_ok=True)\n\n# Create class directories in train and test folders\ncreate_class_dirs(train_dir)\ncreate_class_dirs(test_dir)\n\n# Define the augmentation transforms\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.RandomRotation(30),\n    transforms.RandomHorizontalFlip(p=0.5),\n    transforms.RandomVerticalFlip(p=0.5),\n    transforms.RandomResizedCrop(224, scale=(0.75, 1.0)),\n    transforms.ToTensor()\n])\n\n# Define normalization\ndef compute_mean_std(dataset_path):\n    dataset = ImageFolder(root=dataset_path, transform=transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor()\n    ]))\n    loader = DataLoader(dataset, batch_size=64, shuffle=False, num_workers=2)\n    mean = 0.\n    std = 0.\n    total_images_count = 0\n    for images, _ in loader:\n        batch_samples = images.size(0)\n        images = images.view(batch_samples, images.size(1), -1)\n        mean += images.mean(2).sum(0)\n        std += images.std(2).sum(0)\n        total_images_count += batch_samples\n    mean /= total_images_count\n    std /= total_images_count\n    return mean, std\n\n# Compute mean and std for normalization\n#mean, std = compute_mean_std(data_dir)\n\n#normalize = transforms.Normalize(mean=mean, std=std)\n\n# Function to apply augmentation and save images\ndef augment_and_save(image_path, save_dir, target_count):\n    image = Image.open(image_path).convert(\"RGB\")\n    base_name = os.path.basename(image_path).split('.')[0]\n    \n    for i in range(target_count):\n        augmented_image = transform(image)\n        augmented_image = transforms.ToPILImage()(augmented_image)\n        augmented_image = transforms.ToTensor()(augmented_image)\n        #augmented_image = normalize(augmented_image)\n        augmented_image = transforms.ToPILImage()(augmented_image)\n        augmented_image.save(os.path.join(save_dir, f\"{base_name}_aug_{i}.png\"))\n\n# Split and copy images to train and test directories, and balance training set\nmax_images_per_class = 5000  # Target number of images per class in the training set\n\nfor class_name in class_names:\n    class_path = os.path.join(data_dir, class_name)\n    images = [f for f in os.listdir(class_path) if os.path.isfile(os.path.join(class_path, f))]\n    \n    train_images, test_images = train_test_split(images, test_size=0.2, random_state=42)\n    \n    # Copy train images and augment to match the target number of images per class\n    target_train_dir = os.path.join(train_dir, class_name)\n    for image in train_images:\n        src_path = os.path.join(class_path, image)\n        dst_path = os.path.join(target_train_dir, image)\n        shutil.copy2(src_path, dst_path)\n    \n    # Augment the training images to match the target number of images per class\n    current_train_count = len(train_images)\n    if current_train_count < max_images_per_class:\n        images_to_augment = train_images[:max_images_per_class - current_train_count]\n        for image in images_to_augment:\n            src_path = os.path.join(class_path, image)\n            augment_and_save(src_path, target_train_dir, (max_images_per_class - current_train_count) // len(images_to_augment))\n\n    # Copy test images\n    target_test_dir = os.path.join(test_dir, class_name)\n    for image in test_images:\n        src_path = os.path.join(class_path, image)\n        dst_path = os.path.join(target_test_dir, image)\n        shutil.copy2(src_path, dst_path)\n\nprint(\"Dataset split into balanced training and testing sets.\")\n\n# Function to count images in class\ndef count_images_in_class(dir_path):\n    class_counts = {}\n    for class_name in class_names:\n        class_dir = os.path.join(dir_path, class_name)\n        class_counts[class_name] = len([f for f in os.listdir(class_dir) if os.path.isfile(os.path.join(class_dir, f))])\n    return class_counts\n\n# Count the number of images in each class for training and testing sets\ntrain_counts = count_images_in_class(train_dir)\ntest_counts = count_images_in_class(test_dir)\n\nprint(\"Number of images in each class (training set):\")\nfor class_name, count in train_counts.items():\n    print(f\"{class_name}: {count}\")\n\nprint(\"\\nNumber of images in each class (testing set):\")\nfor class_name, count in test_counts.items():\n    print(f\"{class_name}: {count}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T05:59:47.324450Z","iopub.execute_input":"2024-09-24T05:59:47.324934Z","iopub.status.idle":"2024-09-24T06:08:02.559823Z","shell.execute_reply.started":"2024-09-24T05:59:47.324901Z","shell.execute_reply":"2024-09-24T06:08:02.558790Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Dataset split into balanced training and testing sets.\nNumber of images in each class (training set):\nFETAL ABDOMEN: 4544\nFETAL BRAIN: 4946\nFETAL FEMUR: 4992\nFETAL THORAX: 4122\nMATERNAL CERVIX: 3900\nOTHER: 5000\n\nNumber of images in each class (testing set):\nFETAL ABDOMEN: 143\nFETAL BRAIN: 619\nFETAL FEMUR: 208\nFETAL THORAX: 344\nMATERNAL CERVIX: 326\nOTHER: 843\n","output_type":"stream"}]},{"cell_type":"code","source":"train_dir=\"/kaggle/working/data_split/train\"\ntest_dir=\"/kaggle/working/data_split/test\"","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:08:02.561849Z","iopub.execute_input":"2024-09-24T06:08:02.562153Z","iopub.status.idle":"2024-09-24T06:08:02.566028Z","shell.execute_reply.started":"2024-09-24T06:08:02.562128Z","shell.execute_reply":"2024-09-24T06:08:02.565168Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport torch\nimport torchvision\n\nfrom torch import nn\nfrom torchvision import transforms\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:08:02.567090Z","iopub.execute_input":"2024-09-24T06:08:02.567337Z","iopub.status.idle":"2024-09-24T06:08:02.578889Z","shell.execute_reply.started":"2024-09-24T06:08:02.567315Z","shell.execute_reply":"2024-09-24T06:08:02.578014Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nA series of helper functions used throughout the course.\n\nIf a function gets defined once and could be used over and over, it'll go in here.\n\"\"\"\nimport torch\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom torch import nn\nimport os\nimport zipfile\nfrom pathlib import Path\nimport requests\nimport os\n\n\n\n# Plot linear data or training and test and predictions (optional)\ndef plot_predictions(\n    train_data, train_labels, test_data, test_labels, predictions=None\n):\n    \"\"\"\n  Plots linear training data and test data and compares predictions.\n  \"\"\"\n    plt.figure(figsize=(10, 7))\n\n    # Plot training data in blue\n    plt.scatter(train_data, train_labels, c=\"b\", s=4, label=\"Training data\")\n\n    # Plot test data in green\n    plt.scatter(test_data, test_labels, c=\"g\", s=4, label=\"Testing data\")\n\n    if predictions is not None:\n        # Plot the predictions in red (predictions were made on the test data)\n        plt.scatter(test_data, predictions, c=\"r\", s=4, label=\"Predictions\")\n\n    # Show the legend\n    plt.legend(prop={\"size\": 14})\n\n\n# Calculate accuracy (a classification metric)\ndef accuracy_fn(y_true, y_pred):\n    \"\"\"Calculates accuracy between truth labels and predictions.\n\n    Args:\n        y_true (torch.Tensor): Truth labels for predictions.\n        y_pred (torch.Tensor): Predictions to be compared to predictions.\n\n    Returns:\n        [torch.float]: Accuracy value between y_true and y_pred, e.g. 78.45\n    \"\"\"\n    correct = torch.eq(y_true, y_pred).sum().item()\n    acc = (correct / len(y_pred)) * 100\n    return acc\n\n\ndef print_train_time(start, end, device=None):\n    \"\"\"Prints difference between start and end time.\n\n    Args:\n        start (float): Start time of computation (preferred in timeit format). \n        end (float): End time of computation.\n        device ([type], optional): Device that compute is running on. Defaults to None.\n\n    Returns:\n        float: time between start and end in seconds (higher is longer).\n    \"\"\"\n    total_time = end - start\n    print(f\"\\nTrain time on {device}: {total_time:.3f} seconds\")\n    return total_time\n\n\n# Plot loss curves of a model\ndef plot_loss_curves(results):\n    \"\"\"Plots training curves of a results dictionary.\n\n    Args:\n        results (dict): dictionary containing list of values, e.g.\n            {\"train_loss\": [...],\n             \"train_acc\": [...],\n             \"test_loss\": [...],\n             \"test_acc\": [...]}\n    \"\"\"\n    loss = results[\"train_loss\"]\n    test_loss = results[\"test_loss\"]\n\n    accuracy = results[\"train_acc\"]\n    test_accuracy = results[\"test_acc\"]\n\n    epochs = range(len(results[\"train_loss\"]))\n\n    plt.figure(figsize=(15, 7))\n\n    # Plot loss\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs, loss, label=\"train_loss\")\n    plt.plot(epochs, test_loss, label=\"test_loss\")\n    plt.title(\"Loss\")\n    plt.xlabel(\"Epochs\")\n    plt.legend()\n\n    # Plot accuracy\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs, accuracy, label=\"train_accuracy\")\n    plt.plot(epochs, test_accuracy, label=\"test_accuracy\")\n    plt.title(\"Accuracy\")\n    plt.xlabel(\"Epochs\")\n    plt.legend()\n\n\n# Pred and plot image function from notebook 04\n# See creation: https://www.learnpytorch.io/04_pytorch_custom_datasets/#113-putting-custom-image-prediction-together-building-a-function\nfrom typing import List\nimport torchvision\n\n\ndef pred_and_plot_image(\n    model: torch.nn.Module,\n    image_path: str,\n    class_names: List[str] = None,\n    transform=None,\n    device: torch.device = \"cuda\" if torch.cuda.is_available() else \"cpu\",\n):\n    \"\"\"Makes a prediction on a target image with a trained model and plots the image.\n\n    Args:\n        model (torch.nn.Module): trained PyTorch image classification model.\n        image_path (str): filepath to target image.\n        class_names (List[str], optional): different class names for target image. Defaults to None.\n        transform (_type_, optional): transform of target image. Defaults to None.\n        device (torch.device, optional): target device to compute on. Defaults to \"cuda\" if torch.cuda.is_available() else \"cpu\".\n    \n    Returns:\n        Matplotlib plot of target image and model prediction as title.\n\n    Example usage:\n        pred_and_plot_image(model=model,\n                            image=\"some_image.jpeg\",\n                            class_names=[\"class_1\", \"class_2\", \"class_3\"],\n                            transform=torchvision.transforms.ToTensor(),\n                            device=device)\n    \"\"\"\n\n    # 1. Load in image and convert the tensor values to float32\n    target_image = torchvision.io.read_image(str(image_path)).type(torch.float32)\n\n    # 2. Divide the image pixel values by 255 to get them between [0, 1]\n    target_image = target_image / 255.0\n\n    # 3. Transform if necessary\n    if transform:\n        target_image = transform(target_image)\n\n    # 4. Make sure the model is on the target device\n    model.to(device)\n\n    # 5. Turn on model evaluation mode and inference mode\n    model.eval()\n    with torch.inference_mode():\n        # Add an extra dimension to the image\n        target_image = target_image.unsqueeze(dim=0)\n\n        # Make a prediction on image with an extra dimension and send it to the target device\n        target_image_pred = model(target_image.to(device))\n\n    # 6. Convert logits -> prediction probabilities (using torch.softmax() for multi-class classification)\n    target_image_pred_probs = torch.softmax(target_image_pred, dim=1)\n\n    # 7. Convert prediction probabilities -> prediction labels\n    target_image_pred_label = torch.argmax(target_image_pred_probs, dim=1)\n\n    # 8. Plot the image alongside the prediction and prediction probability\n    plt.imshow(\n        target_image.squeeze().permute(1, 2, 0)\n    )  # make sure it's the right size for matplotlib\n    if class_names:\n        title = f\"Pred: {class_names[target_image_pred_label.cpu()]} | Prob: {target_image_pred_probs.max().cpu():.3f}\"\n    else:\n        title = f\"Pred: {target_image_pred_label} | Prob: {target_image_pred_probs.max().cpu():.3f}\"\n    plt.title(title)\n    plt.axis(False)\n\ndef set_seeds(seed: int=42):\n    \"\"\"Sets random sets for torch operations.\n\n    Args:\n        seed (int, optional): Random seed to set. Defaults to 42.\n    \"\"\"\n    # Set the seed for general torch operations\n    torch.manual_seed(seed)\n    # Set the seed for CUDA torch operations (ones that happen on the GPU)\n    torch.cuda.manual_seed(seed)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:08:02.580156Z","iopub.execute_input":"2024-09-24T06:08:02.580420Z","iopub.status.idle":"2024-09-24T06:08:02.630953Z","shell.execute_reply.started":"2024-09-24T06:08:02.580398Z","shell.execute_reply":"2024-09-24T06:08:02.630072Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\ndevice","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:08:02.631968Z","iopub.execute_input":"2024-09-24T06:08:02.632263Z","iopub.status.idle":"2024-09-24T06:08:02.649369Z","shell.execute_reply.started":"2024-09-24T06:08:02.632240Z","shell.execute_reply":"2024-09-24T06:08:02.648434Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"'cuda'"},"metadata":{}}]},{"cell_type":"code","source":"import os\nimport shutil\nfrom sklearn.model_selection import train_test_split\nfrom collections import Counter\nimport random\nfrom PIL import Image\nimport torchvision.transforms as transforms\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\n\n# Define the path to the dataset\ndata_dir = '/kaggle/input/vit-dataset/FETAL_PLANES_ZENODO'\noutput_dir = '/kaggle/working/data_split'\n\n# Define the class names\nclass_names = ['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n\n# Create output directories for training and testing sets\ntrain_dir = os.path.join(output_dir, 'train')\ntest_dir = os.path.join(output_dir, 'test')\nos.makedirs(train_dir, exist_ok=True)\nos.makedirs(test_dir, exist_ok=True)\n\n# Function to create directories if they don't exist\ndef create_class_dirs(base_dir):\n    for class_name in class_names:\n        os.makedirs(os.path.join(base_dir, class_name), exist_ok=True)\n\n# Create class directories in train and test folders\ncreate_class_dirs(train_dir)\ncreate_class_dirs(test_dir)\n\n# Define the augmentation transforms\ntransform = transforms.Compose([\n    transforms.Resize((224, 224)),\n    transforms.RandomRotation(30),\n    transforms.RandomHorizontalFlip(p=0.5),\n    transforms.RandomVerticalFlip(p=0.5),\n    transforms.RandomResizedCrop(224, scale=(0.75, 1.0)),\n    transforms.ToTensor()\n])\n\n# Define normalization\ndef compute_mean_std(dataset_path):\n    dataset = ImageFolder(root=dataset_path, transform=transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor()\n    ]))\n    loader = DataLoader(dataset, batch_size=64, shuffle=False, num_workers=2)\n    mean = 0.\n    std = 0.\n    total_images_count = 0\n    for images, _ in loader:\n        batch_samples = images.size(0)\n        images = images.view(batch_samples, images.size(1), -1)\n        mean += images.mean(2).sum(0)\n        std += images.std(2).sum(0)\n        total_images_count += batch_samples\n    mean /= total_images_count\n    std /= total_images_count\n    return mean, std\n\n# Compute mean and std for normalization\n#mean, std = compute_mean_std(data_dir)\n\n#normalize = transforms.Normalize(mean=mean, std=std)\n\n# Function to apply augmentation and save images\ndef augment_and_save(image_path, save_dir, target_count):\n    image = Image.open(image_path).convert(\"RGB\")\n    base_name = os.path.basename(image_path).split('.')[0]\n    \n    for i in range(target_count):\n        augmented_image = transform(image)\n        augmented_image = transforms.ToPILImage()(augmented_image)\n        augmented_image = transforms.ToTensor()(augmented_image)\n        #augmented_image = normalize(augmented_image)\n        augmented_image = transforms.ToPILImage()(augmented_image)\n        augmented_image.save(os.path.join(save_dir, f\"{base_name}_aug_{i}.png\"))\n\n# Split and copy images to train and test directories, and balance training set\nmax_images_per_class = 5000  # Target number of images per class in the training set\n\nfor class_name in class_names:\n    class_path = os.path.join(data_dir, class_name)\n    images = [f for f in os.listdir(class_path) if os.path.isfile(os.path.join(class_path, f))]\n    \n    train_images, test_images = train_test_split(images, test_size=0.2, random_state=42)\n    \n    # Copy train images and augment to match the target number of images per class\n    target_train_dir = os.path.join(train_dir, class_name)\n    for image in train_images:\n        src_path = os.path.join(class_path, image)\n        dst_path = os.path.join(target_train_dir, image)\n        shutil.copy2(src_path, dst_path)\n    \n    # Augment the training images to match the target number of images per class\n    current_train_count = len(train_images)\n    if current_train_count < max_images_per_class:\n        images_to_augment = train_images[:max_images_per_class - current_train_count]\n        for image in images_to_augment:\n            src_path = os.path.join(class_path, image)\n            augment_and_save(src_path, target_train_dir, (max_images_per_class - current_train_count) // len(images_to_augment))\n\n    # Copy test images\n    target_test_dir = os.path.join(test_dir, class_name)\n    for image in test_images:\n        src_path = os.path.join(class_path, image)\n        dst_path = os.path.join(target_test_dir, image)\n        shutil.copy2(src_path, dst_path)\n\nprint(\"Dataset split into balanced training and testing sets.\")\n\n# Function to count images in class\ndef count_images_in_class(dir_path):\n    class_counts = {}\n    for class_name in class_names:\n        class_dir = os.path.join(dir_path, class_name)\n        class_counts[class_name] = len([f for f in os.listdir(class_dir) if os.path.isfile(os.path.join(class_dir, f))])\n    return class_counts\n\n# Count the number of images in each class for training and testing sets\ntrain_counts = count_images_in_class(train_dir)\ntest_counts = count_images_in_class(test_dir)\n\nprint(\"Number of images in each class (training set):\")\nfor class_name, count in train_counts.items():\n    print(f\"{class_name}: {count}\")\n\nprint(\"\\nNumber of images in each class (testing set):\")\nfor class_name, count in test_counts.items():\n    print(f\"{class_name}: {count}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:08:02.650742Z","iopub.execute_input":"2024-09-24T06:08:02.651100Z","iopub.status.idle":"2024-09-24T06:15:21.447766Z","shell.execute_reply.started":"2024-09-24T06:08:02.651070Z","shell.execute_reply":"2024-09-24T06:15:21.446831Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Dataset split into balanced training and testing sets.\nNumber of images in each class (training set):\nFETAL ABDOMEN: 4544\nFETAL BRAIN: 4946\nFETAL FEMUR: 4992\nFETAL THORAX: 4122\nMATERNAL CERVIX: 3900\nOTHER: 5000\n\nNumber of images in each class (testing set):\nFETAL ABDOMEN: 143\nFETAL BRAIN: 619\nFETAL FEMUR: 208\nFETAL THORAX: 344\nMATERNAL CERVIX: 326\nOTHER: 843\n","output_type":"stream"}]},{"cell_type":"code","source":"# 1. Get pretrained weights for ViT-Base\npretrained_vit_weights = torchvision.models.ViT_B_16_Weights.DEFAULT \n\n# 2. Setup a ViT model instance with pretrained weights\npretrained_vit = torchvision.models.vit_b_16(weights=pretrained_vit_weights).to(device)\n\n# 3. Freeze the base parameters\nfor parameter in pretrained_vit.parameters():\n    parameter.requires_grad = False\n    \n# 4. Change the classifier head \nclass_names = ['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n\n\nset_seeds()\npretrained_vit.heads = nn.Linear(in_features=768, out_features=len(class_names)).to(device)\n# pretrained_vit # uncomment for model output ","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:21.448891Z","iopub.execute_input":"2024-09-24T06:15:21.449289Z","iopub.status.idle":"2024-09-24T06:15:26.457717Z","shell.execute_reply.started":"2024-09-24T06:15:21.449244Z","shell.execute_reply":"2024-09-24T06:15:26.456934Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"Downloading: \"https://download.pytorch.org/models/vit_b_16-c867db91.pth\" to /root/.cache/torch/hub/checkpoints/vit_b_16-c867db91.pth\n100%|██████████| 330M/330M [00:03<00:00, 109MB/s]  \n","output_type":"stream"}]},{"cell_type":"code","source":"from torchinfo import summary\n\n# Print a summary using torchinfo (uncomment for actual output)\nsummary(model=pretrained_vit, \n        input_size=(32, 3, 224, 224), # (batch_size, color_channels, height, width)\n        # col_names=[\"input_size\"], # uncomment for smaller output\n        col_names=[\"input_size\", \"output_size\", \"num_params\", \"trainable\"],\n        col_width=20,\n        row_settings=[\"var_names\"]\n)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:26.461316Z","iopub.execute_input":"2024-09-24T06:15:26.461593Z","iopub.status.idle":"2024-09-24T06:15:27.238107Z","shell.execute_reply.started":"2024-09-24T06:15:26.461569Z","shell.execute_reply":"2024-09-24T06:15:27.237241Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"============================================================================================================================================\nLayer (type (var_name))                                      Input Shape          Output Shape         Param #              Trainable\n============================================================================================================================================\nVisionTransformer (VisionTransformer)                        [32, 3, 224, 224]    [32, 6]              768                  Partial\n├─Conv2d (conv_proj)                                         [32, 3, 224, 224]    [32, 768, 14, 14]    (590,592)            False\n├─Encoder (encoder)                                          [32, 197, 768]       [32, 197, 768]       151,296              False\n│    └─Dropout (dropout)                                     [32, 197, 768]       [32, 197, 768]       --                   --\n│    └─Sequential (layers)                                   [32, 197, 768]       [32, 197, 768]       --                   False\n│    │    └─EncoderBlock (encoder_layer_0)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_1)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_2)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_3)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_4)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_5)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_6)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_7)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_8)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_9)                   [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_10)                  [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    │    └─EncoderBlock (encoder_layer_11)                  [32, 197, 768]       [32, 197, 768]       (7,087,872)          False\n│    └─LayerNorm (ln)                                        [32, 197, 768]       [32, 197, 768]       (1,536)              False\n├─Linear (heads)                                             [32, 768]            [32, 6]              4,614                True\n============================================================================================================================================\nTotal params: 85,803,270\nTrainable params: 4,614\nNon-trainable params: 85,798,656\nTotal mult-adds (G): 5.52\n============================================================================================================================================\nInput size (MB): 19.27\nForward/backward pass size (MB): 3330.74\nParams size (MB): 229.21\nEstimated Total Size (MB): 3579.22\n============================================================================================================================================"},"metadata":{}}]},{"cell_type":"code","source":"# Get automatic transforms from pretrained ViT weights\npretrained_vit_transforms = pretrained_vit_weights.transforms()\nprint(pretrained_vit_transforms)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:27.239110Z","iopub.execute_input":"2024-09-24T06:15:27.239383Z","iopub.status.idle":"2024-09-24T06:15:27.244237Z","shell.execute_reply.started":"2024-09-24T06:15:27.239359Z","shell.execute_reply":"2024-09-24T06:15:27.243252Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"ImageClassification(\n    crop_size=[224]\n    resize_size=[256]\n    mean=[0.485, 0.456, 0.406]\n    std=[0.229, 0.224, 0.225]\n    interpolation=InterpolationMode.BILINEAR\n)\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\n\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader\n\nNUM_WORKERS = os.cpu_count()\n\ndef create_dataloaders(\n    train_dir: str, \n    test_dir: str, \n    transform: transforms.Compose, \n    batch_size: int, \n    num_workers: int=NUM_WORKERS\n):\n\n  # Use ImageFolder to create dataset(s)\n  train_data = datasets.ImageFolder(train_dir, transform=transform)\n  test_data = datasets.ImageFolder(test_dir, transform=transform)\n\n  # Get class names\n  class_names = train_data.classes\n\n  # Turn images into data loaders\n  train_dataloader = DataLoader(\n      train_data,\n      batch_size=batch_size,\n      shuffle=True,\n      num_workers=num_workers,\n      pin_memory=True,\n  )\n  test_dataloader = DataLoader(\n      test_data,\n      batch_size=batch_size,\n      shuffle=False,\n      num_workers=num_workers,\n      pin_memory=True,\n  )\n\n  return train_dataloader, test_dataloader, class_names","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:27.245439Z","iopub.execute_input":"2024-09-24T06:15:27.245761Z","iopub.status.idle":"2024-09-24T06:15:27.262365Z","shell.execute_reply.started":"2024-09-24T06:15:27.245732Z","shell.execute_reply":"2024-09-24T06:15:27.261669Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Setup dataloaders\ntrain_dataloader_pretrained, test_dataloader_pretrained, class_names = create_dataloaders(train_dir=train_dir,\n                                                                                                     test_dir=test_dir,\n                                                                                                     transform=pretrained_vit_transforms,\n                                                                                                     batch_size=32) # Could increase if we had more samples, such as here: https://arxiv.org/abs/2205.01580 (there are other improvements there too...)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:27.263328Z","iopub.execute_input":"2024-09-24T06:15:27.263645Z","iopub.status.idle":"2024-09-24T06:15:27.410721Z","shell.execute_reply.started":"2024-09-24T06:15:27.263622Z","shell.execute_reply":"2024-09-24T06:15:27.409885Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nContains functions for training and testing a PyTorch model.\n\"\"\"\nimport torch\n\nfrom tqdm.auto import tqdm\nfrom typing import Dict, List, Tuple\n# Setup dataloaders\ntrain_dataloader_pretrained, test_dataloader_pretrained, class_names = create_dataloaders(train_dir=train_dir,\n                                                                                                     test_dir=test_dir,\n                                                                                                     transform=pretrained_vit_transforms,\n                                                                                                     batch_size=32) # Could increase if we had more samples, such as here: https://arxiv.org/abs/2205.01580 (there are other improvements there too...)\ndef train_step(model: torch.nn.Module, \n               dataloader: torch.utils.data.DataLoader, \n               loss_fn: torch.nn.Module, \n               optimizer: torch.optim.Optimizer,\n               device: torch.device) -> Tuple[float, float]:\n    \"\"\"Trains a PyTorch model for a single epoch.\n\n    Turns a target PyTorch model to training mode and then\n    runs through all of the required training steps (forward\n    pass, loss calculation, optimizer step).\n\n    Args:\n    model: A PyTorch model to be trained.\n    dataloader: A DataLoader instance for the model to be trained on.\n    loss_fn: A PyTorch loss function to minimize.\n    optimizer: A PyTorch optimizer to help minimize the loss function.\n    device: A target device to compute on (e.g. \"cuda\" or \"cpu\").\n\n    Returns:\n    A tuple of training loss and training accuracy metrics.\n    In the form (train_loss, train_accuracy). For example:\n\n    (0.1112, 0.8743)\n    \"\"\"\n    # Put model in train mode\n    model.train()\n\n    # Setup train loss and train accuracy values\n    train_loss, train_acc = 0, 0\n\n    # Loop through data loader data batches\n    for batch, (X, y) in enumerate(dataloader):\n        # Send data to target device\n        X, y = X.to(device), y.to(device)\n\n        # 1. Forward pass\n        y_pred = model(X)\n\n        # 2. Calculate  and accumulate loss\n        loss = loss_fn(y_pred, y)\n        train_loss += loss.item() \n\n        # 3. Optimizer zero grad\n        optimizer.zero_grad()\n\n        # 4. Loss backward\n        loss.backward()\n\n        # 5. Optimizer step\n        optimizer.step()\n\n        # Calculate and accumulate accuracy metric across all batches\n        y_pred_class = torch.argmax(torch.softmax(y_pred, dim=1), dim=1)\n        train_acc += (y_pred_class == y).sum().item()/len(y_pred)\n\n    # Adjust metrics to get average loss and accuracy per batch \n    train_loss = train_loss / len(dataloader)\n    train_acc = train_acc / len(dataloader)\n    return train_loss, train_acc\n\ndef test_step(model: torch.nn.Module, \n              dataloader: torch.utils.data.DataLoader, \n              loss_fn: torch.nn.Module,\n              device: torch.device) -> Tuple[float, float]:\n    \"\"\"Tests a PyTorch model for a single epoch.\n\n    Turns a target PyTorch model to \"eval\" mode and then performs\n    a forward pass on a testing dataset.\n\n    Args:\n    model: A PyTorch model to be tested.\n    dataloader: A DataLoader instance for the model to be tested on.\n    loss_fn: A PyTorch loss function to calculate loss on the test data.\n    device: A target device to compute on (e.g. \"cuda\" or \"cpu\").\n\n    Returns:\n    A tuple of testing loss and testing accuracy metrics.\n    In the form (test_loss, test_accuracy). For example:\n\n    (0.0223, 0.8985)\n    \"\"\"\n    # Put model in eval mode\n    model.eval() \n\n    # Setup test loss and test accuracy values\n    test_loss, test_acc = 0, 0\n\n    # Turn on inference context manager\n    with torch.inference_mode():\n        # Loop through DataLoader batches\n        for batch, (X, y) in enumerate(dataloader):\n            # Send data to target device\n            X, y = X.to(device), y.to(device)\n\n            # 1. Forward pass\n            test_pred_logits = model(X)\n\n            # 2. Calculate and accumulate loss\n            loss = loss_fn(test_pred_logits, y)\n            test_loss += loss.item()\n\n            # Calculate and accumulate accuracy\n            test_pred_labels = test_pred_logits.argmax(dim=1)\n            test_acc += ((test_pred_labels == y).sum().item()/len(test_pred_labels))\n\n    # Adjust metrics to get average loss and accuracy per batch \n    test_loss = test_loss / len(dataloader)\n    test_acc = test_acc / len(dataloader)\n    return test_loss, test_acc\n\ndef train(model: torch.nn.Module, \n          train_dataloader: torch.utils.data.DataLoader, \n          test_dataloader: torch.utils.data.DataLoader, \n          optimizer: torch.optim.Optimizer,\n          loss_fn: torch.nn.Module,\n          epochs: int,\n          device: torch.device) -> Dict[str, List]:\n    \"\"\"Trains and tests a PyTorch model.\n\n    Passes a target PyTorch models through train_step() and test_step()\n    functions for a number of epochs, training and testing the model\n    in the same epoch loop.\n\n    Calculates, prints and stores evaluation metrics throughout.\n\n    Args:\n    model: A PyTorch model to be trained and tested.\n    train_dataloader: A DataLoader instance for the model to be trained on.\n    test_dataloader: A DataLoader instance for the model to be tested on.\n    optimizer: A PyTorch optimizer to help minimize the loss function.\n    loss_fn: A PyTorch loss function to calculate loss on both datasets.\n    epochs: An integer indicating how many epochs to train for.\n    device: A target device to compute on (e.g. \"cuda\" or \"cpu\").\n\n    Returns:\n    A dictionary of training and testing loss as well as training and\n    testing accuracy metrics. Each metric has a value in a list for \n    each epoch.\n    In the form: {train_loss: [...],\n              train_acc: [...],\n              test_loss: [...],\n              test_acc: [...]} \n    For example if training for epochs=2: \n             {train_loss: [2.0616, 1.0537],\n              train_acc: [0.3945, 0.3945],\n              test_loss: [1.2641, 1.5706],\n              test_acc: [0.3400, 0.2973]} \n    \"\"\"\n    # Create empty results dictionary\n    results = {\"train_loss\": [],\n               \"train_acc\": [],\n               \"test_loss\": [],\n               \"test_acc\": []\n    }\n    \n    # Make sure model on target device\n    model.to(device)\n\n    # Loop through training and testing steps for a number of epochs\n    for epoch in tqdm(range(epochs)):\n        train_loss, train_acc = train_step(model=model,\n                                          dataloader=train_dataloader,\n                                          loss_fn=loss_fn,\n                                          optimizer=optimizer,\n                                          device=device)\n        test_loss, test_acc = test_step(model=model,\n          dataloader=test_dataloader,\n          loss_fn=loss_fn,\n          device=device)\n\n        # Print out what's happening\n        print(\n          f\"Epoch: {epoch+1} | \"\n          f\"train_loss: {train_loss:.4f} | \"\n          f\"train_acc: {train_acc:.4f} | \"\n          f\"test_loss: {test_loss:.4f} | \"\n          f\"test_acc: {test_acc:.4f}\"\n        )\n\n        # Update results dictionary\n        results[\"train_loss\"].append(train_loss)\n        results[\"train_acc\"].append(train_acc)\n        results[\"test_loss\"].append(test_loss)\n        results[\"test_acc\"].append(test_acc)\n\n    # Return the filled results at the end of the epochs\n    return results","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:15:27.412092Z","iopub.execute_input":"2024-09-24T06:15:27.412427Z","iopub.status.idle":"2024-09-24T06:15:27.572849Z","shell.execute_reply.started":"2024-09-24T06:15:27.412398Z","shell.execute_reply":"2024-09-24T06:15:27.572186Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"optimizer = torch.optim.Adam(params=pretrained_vit.parameters(), \n                             lr=1e-3)\nloss_fn = torch.nn.CrossEntropyLoss()\n\n# Train the classifier head of the pretrained ViT feature extractor model\nset_seeds()\npretrained_vit_results = train(model=pretrained_vit,\n                                      train_dataloader=train_dataloader_pretrained,\n                                      test_dataloader=test_dataloader_pretrained,\n                                      optimizer=optimizer,\n                                      loss_fn=loss_fn,\n                                      epochs=10,\n                                      device=device)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:19:21.846206Z","iopub.execute_input":"2024-09-24T06:19:21.847513Z","iopub.status.idle":"2024-09-24T06:53:33.947109Z","shell.execute_reply.started":"2024-09-24T06:19:21.847473Z","shell.execute_reply":"2024-09-24T06:53:33.945962Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/10 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"49e5ecb5342a4f83915a4ab41dde44fd"}},"metadata":{}},{"name":"stdout","text":"Epoch: 1 | train_loss: 0.2394 | train_acc: 0.9239 | test_loss: 0.2395 | test_acc: 0.9213\nEpoch: 2 | train_loss: 0.2128 | train_acc: 0.9311 | test_loss: 0.2307 | test_acc: 0.9180\nEpoch: 3 | train_loss: 0.1980 | train_acc: 0.9370 | test_loss: 0.2274 | test_acc: 0.9136\nEpoch: 4 | train_loss: 0.1890 | train_acc: 0.9402 | test_loss: 0.2304 | test_acc: 0.9180\nEpoch: 5 | train_loss: 0.1805 | train_acc: 0.9426 | test_loss: 0.2473 | test_acc: 0.9114\nEpoch: 6 | train_loss: 0.1757 | train_acc: 0.9429 | test_loss: 0.2392 | test_acc: 0.9209\nEpoch: 7 | train_loss: 0.1707 | train_acc: 0.9439 | test_loss: 0.2303 | test_acc: 0.9210\nEpoch: 8 | train_loss: 0.1673 | train_acc: 0.9450 | test_loss: 0.2357 | test_acc: 0.9207\nEpoch: 9 | train_loss: 0.1629 | train_acc: 0.9480 | test_loss: 0.2266 | test_acc: 0.9203\nEpoch: 10 | train_loss: 0.1597 | train_acc: 0.9473 | test_loss: 0.2406 | test_acc: 0.9198\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"\"\"\"\nUtility functions to make predictions.\n\nMain reference for code creation: https://www.learnpytorch.io/06_pytorch_transfer_learning/#6-make-predictions-on-images-from-the-test-set \n\"\"\"\nimport torch\nimport torchvision\nfrom torchvision import transforms\nimport matplotlib.pyplot as plt\n\nfrom typing import List, Tuple\n\nfrom PIL import Image\n\n# Set device\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# Predict on a target image with a target model\n# Function created in: https://www.learnpytorch.io/06_pytorch_transfer_learning/#6-make-predictions-on-images-from-the-test-set\ndef pred_and_plot_image(\n    model: torch.nn.Module,\n    class_names: List[str],\n    image_path: str,\n    image_size: Tuple[int, int] = (224, 224),\n    transform: torchvision.transforms = None,\n    device: torch.device = device,\n):\n    \"\"\"Predicts on a target image with a target model.\n\n    Args:\n        model (torch.nn.Module): A trained (or untrained) PyTorch model to predict on an image.\n        class_names (List[str]): A list of target classes to map predictions to.\n        image_path (str): Filepath to target image to predict on.\n        image_size (Tuple[int, int], optional): Size to transform target image to. Defaults to (224, 224).\n        transform (torchvision.transforms, optional): Transform to perform on image. Defaults to None which uses ImageNet normalization.\n        device (torch.device, optional): Target device to perform prediction on. Defaults to device.\n    \"\"\"\n\n    # Open image\n    img = Image.open(image_path)\n\n    # Create transformation for image (if one doesn't exist)\n    if transform is not None:\n        image_transform = transform\n    else:\n        image_transform = transforms.Compose(\n            [\n                transforms.Resize(image_size),\n                transforms.ToTensor(),\n                transforms.Normalize(\n                    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]\n                ),\n            ]\n        )\n\n    ### Predict on image ###\n\n    # Make sure the model is on the target device\n    model.to(device)\n\n    # Turn on model evaluation mode and inference mode\n    model.eval()\n    with torch.inference_mode():\n        # Transform and add an extra dimension to image (model requires samples in [batch_size, color_channels, height, width])\n        transformed_image = image_transform(img).unsqueeze(dim=0)\n\n        # Make a prediction on image with an extra dimension and send it to the target device\n        target_image_pred = model(transformed_image.to(device))\n\n    # Convert logits -> prediction probabilities (using torch.softmax() for multi-class classification)\n    target_image_pred_probs = torch.softmax(target_image_pred, dim=1)\n\n    # Convert prediction probabilities -> prediction labels\n    target_image_pred_label = torch.argmax(target_image_pred_probs, dim=1)\n\n    # Plot image with predicted label and probability\n    plt.figure()\n    plt.imshow(img)\n    plt.title(\n        f\"Pred: {class_names[target_image_pred_label]} | Prob: {target_image_pred_probs.max():.3f}\"\n    )\n    plt.axis(False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:53:33.949882Z","iopub.execute_input":"2024-09-24T06:53:33.950300Z","iopub.status.idle":"2024-09-24T06:53:33.964236Z","shell.execute_reply.started":"2024-09-24T06:53:33.950258Z","shell.execute_reply":"2024-09-24T06:53:33.963256Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"import requests\nfrom PIL import Image\nimport torch\nimport torchvision.transforms as transforms\nfrom matplotlib import pyplot as plt\n\n\n\ndef pred_and_plot_image(model, image_path, class_names):\n    # Open image\n    img = Image.open(image_path)\n    \n    # Convert grayscale images to RGB\n    if img.mode != \"RGB\":\n        img = img.convert(\"RGB\")\n    \n    # Define the transformations\n    transform = transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor()\n    ])\n    \n    # Apply transformations to the image\n    img = transform(img).unsqueeze(0)  # Add batch dimension\n\n    # Move the image to the same device as the model\n    img = img.to(next(model.parameters()).device)\n    \n    # Make predictions\n    model.eval()\n    with torch.no_grad():\n        pred = model(img)\n    \n    # Get the predicted class\n    pred_class = class_names[pred.argmax(dim=1).item()]\n\n    # Plot the image and the prediction\n    img = img.squeeze().permute(1, 2, 0).cpu().numpy()  # Convert to numpy array\n    plt.imshow(img)\n    plt.title(f\"Prediction: {pred_class}\")\n    plt.axis(False)\n    plt.show()\n\n# Setup custom image path\ncustom_image_path = \"/kaggle/working/data_split/test/FETAL BRAIN/Patient01291_Plane3_1_of_2.png\"\n\n# Define your class names\nclass_names = ['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n\n# Predict on custom image\npred_and_plot_image(model=pretrained_vit,\n                    image_path=custom_image_path,\n                    class_names=class_names)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:53:33.965616Z","iopub.execute_input":"2024-09-24T06:53:33.966212Z","iopub.status.idle":"2024-09-24T06:53:34.252780Z","shell.execute_reply.started":"2024-09-24T06:53:33.966181Z","shell.execute_reply":"2024-09-24T06:53:34.251918Z"},"trusted":true},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import requests\nfrom PIL import Image\nimport torch\nimport torchvision.transforms as transforms\nfrom matplotlib import pyplot as plt\n\n\n\ndef pred_and_plot_image(model, image_path, class_names):\n    # Open image\n    img = Image.open(image_path)\n    \n    # Convert grayscale images to RGB\n    if img.mode != \"RGB\":\n        img = img.convert(\"RGB\")\n    \n    # Define the transformations\n    transform = transforms.Compose([\n        transforms.Resize((224, 224)),\n        transforms.ToTensor()\n    ])\n    \n    # Apply transformations to the image\n    img = transform(img).unsqueeze(0)  # Add batch dimension\n\n    # Move the image to the same device as the model\n    img = img.to(next(model.parameters()).device)\n    \n    # Make predictions\n    model.eval()\n    with torch.no_grad():\n        pred = model(img)\n    \n    # Get the predicted class\n    pred_class = class_names[pred.argmax(dim=1).item()]\n\n    # Plot the image and the prediction\n    img = img.squeeze().permute(1, 2, 0).cpu().numpy()  # Convert to numpy array\n    plt.imshow(img)\n    plt.title(f\"Prediction: {pred_class}\")\n    plt.axis(False)\n    plt.show()\n\n# Setup custom image path\ncustom_image_path = \"/kaggle/working/data_split/test/MATERNAL CERVIX/Patient01178_Plane4_3_of_4.png\"\n\n# Define your class names\nclass_names = ['FETAL ABDOMEN', 'FETAL BRAIN', 'FETAL FEMUR', 'FETAL THORAX', 'MATERNAL CERVIX', 'OTHER']\n\n# Predict on custom image\npred_and_plot_image(model=pretrained_vit,\n                    image_path=custom_image_path,\n                    class_names=class_names)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T06:53:34.254669Z","iopub.execute_input":"2024-09-24T06:53:34.254967Z","iopub.status.idle":"2024-09-24T06:53:34.506840Z","shell.execute_reply.started":"2024-09-24T06:53:34.254941Z","shell.execute_reply":"2024-09-24T06:53:34.505899Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"!pip install einops","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:02:15.297664Z","iopub.execute_input":"2024-09-24T07:02:15.298069Z","iopub.status.idle":"2024-09-24T07:02:28.703730Z","shell.execute_reply.started":"2024-09-24T07:02:15.298004Z","shell.execute_reply":"2024-09-24T07:02:28.702618Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Collecting einops\n  Downloading einops-0.8.0-py3-none-any.whl.metadata (12 kB)\nDownloading einops-0.8.0-py3-none-any.whl (43 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.2/43.2 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: einops\nSuccessfully installed einops-0.8.0\n","output_type":"stream"}]},{"cell_type":"code","source":"from PIL import Image\nimport torchvision.transforms as transforms\nimport matplotlib.pyplot as plt\nimport torch\nimport numpy as np\nimport cv2","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:02:33.358351Z","iopub.execute_input":"2024-09-24T07:02:33.359271Z","iopub.status.idle":"2024-09-24T07:02:33.551259Z","shell.execute_reply.started":"2024-09-24T07:02:33.359234Z","shell.execute_reply":"2024-09-24T07:02:33.550252Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"%%capture\nCLS2IDX = {0: 'fetal brain',\n           1: 'fetal thorax',\n           2: 'maternal cervix',\n           3: 'fetal abdomen',\n           4: 'fetal femur',\n           5: 'other'\n          }","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:04:52.852976Z","iopub.execute_input":"2024-09-24T07:04:52.853624Z","iopub.status.idle":"2024-09-24T07:04:52.860607Z","shell.execute_reply.started":"2024-09-24T07:04:52.853591Z","shell.execute_reply":"2024-09-24T07:04:52.859719Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"#@title Perform thresholding on the relevance (using Otsu's method)\n#@title Number of layers for image Transformer\nuse_thresholding =  False#@param {type:\"boolean\"}","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:05:02.058342Z","iopub.execute_input":"2024-09-24T07:05:02.059226Z","iopub.status.idle":"2024-09-24T07:05:02.062982Z","shell.execute_reply.started":"2024-09-24T07:05:02.059196Z","shell.execute_reply":"2024-09-24T07:05:02.062095Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"normalize = transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])\ntransform = transforms.Compose([\n    transforms.Resize(256),\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    normalize,\n])","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:05:12.161241Z","iopub.execute_input":"2024-09-24T07:05:12.161687Z","iopub.status.idle":"2024-09-24T07:05:12.168971Z","shell.execute_reply.started":"2024-09-24T07:05:12.161652Z","shell.execute_reply":"2024-09-24T07:05:12.167783Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"def show_cam_on_image(img, mask):\n    heatmap = cv2.applyColorMap(np.uint8(255 * mask), cv2.COLORMAP_JET)\n    heatmap = np.float32(heatmap) / 255\n    cam = heatmap + np.float32(img)\n    cam = cam / np.max(cam)\n    return cam\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:05:20.478438Z","iopub.execute_input":"2024-09-24T07:05:20.478886Z","iopub.status.idle":"2024-09-24T07:05:20.485370Z","shell.execute_reply.started":"2024-09-24T07:05:20.478851Z","shell.execute_reply":"2024-09-24T07:05:20.484274Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# # initialize ViT pretrained\n# model = vit_LRP(pretrained=True).cuda()\n# model.eval()\n# attribution_generator = LRP(model)\n\nmodel = pretrained_vit.cuda()\nmodel.eval()","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:10:29.584009Z","iopub.execute_input":"2024-09-24T07:10:29.584581Z","iopub.status.idle":"2024-09-24T07:10:29.600837Z","shell.execute_reply.started":"2024-09-24T07:10:29.584547Z","shell.execute_reply":"2024-09-24T07:10:29.599889Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"VisionTransformer(\n  (conv_proj): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16))\n  (encoder): Encoder(\n    (dropout): Dropout(p=0.0, inplace=False)\n    (layers): Sequential(\n      (encoder_layer_0): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_1): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_2): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_3): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_4): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_5): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_6): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_7): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_8): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_9): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_10): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n      (encoder_layer_11): EncoderBlock(\n        (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (self_attention): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)\n        )\n        (dropout): Dropout(p=0.0, inplace=False)\n        (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n        (mlp): MLPBlock(\n          (0): Linear(in_features=768, out_features=3072, bias=True)\n          (1): GELU(approximate='none')\n          (2): Dropout(p=0.0, inplace=False)\n          (3): Linear(in_features=3072, out_features=768, bias=True)\n          (4): Dropout(p=0.0, inplace=False)\n        )\n      )\n    )\n    (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)\n  )\n  (heads): Linear(in_features=768, out_features=6, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"import argparse\nimport torch\nimport numpy as np\nfrom numpy import *\n\n# compute rollout between attention layers\ndef compute_rollout_attention(all_layer_matrices, start_layer=0):\n    # adding residual consideration- code adapted from https://github.com/samiraabnar/attention_flow\n    num_tokens = all_layer_matrices[0].shape[1]\n    batch_size = all_layer_matrices[0].shape[0]\n    eye = torch.eye(num_tokens).expand(batch_size, num_tokens, num_tokens).to(all_layer_matrices[0].device)\n    all_layer_matrices = [all_layer_matrices[i] + eye for i in range(len(all_layer_matrices))]\n    matrices_aug = [all_layer_matrices[i] / all_layer_matrices[i].sum(dim=-1, keepdim=True)\n                          for i in range(len(all_layer_matrices))]\n    joint_attention = matrices_aug[start_layer]\n    for i in range(start_layer+1, len(matrices_aug)):\n        joint_attention = matrices_aug[i].bmm(joint_attention)\n    return joint_attention\n\nclass LRP:\n    def __init__(self, model):\n        self.model = model\n        self.model.eval()\n\n    def generate_LRP(self, input, index=None, method=\"transformer_attribution\", is_ablation=False, start_layer=0):\n        output = self.model(input)\n        kwargs = {\"alpha\": 1}\n        if index == None:\n            index = np.argmax(output.cpu().data.numpy(), axis=-1)\n\n        one_hot = np.zeros((1, output.size()[-1]), dtype=np.float32)\n        one_hot[0, index] = 1\n        one_hot_vector = one_hot\n        one_hot = torch.from_numpy(one_hot).requires_grad_(True)\n        one_hot = torch.sum(one_hot.cuda() * output)\n\n        self.model.zero_grad()\n        one_hot.backward(retain_graph=True)\n\n        return self.model.relprop(torch.tensor(one_hot_vector).to(input.device), method=method, is_ablation=is_ablation,\n                                  start_layer=start_layer, **kwargs)\n\n\n\nclass Baselines:\n    def __init__(self, model):\n        self.model = model\n        self.model.eval()\n\n    def generate_cam_attn(self, input, index=None):\n        output = self.model(input.cuda(), register_hook=True)\n        if index == None:\n            index = np.argmax(output.cpu().data.numpy())\n\n        one_hot = np.zeros((1, output.size()[-1]), dtype=np.float32)\n        one_hot[0][index] = 1\n        one_hot = torch.from_numpy(one_hot).requires_grad_(True)\n        one_hot = torch.sum(one_hot.cuda() * output)\n\n        self.model.zero_grad()\n        one_hot.backward(retain_graph=True)\n        #################### attn\n        grad = self.model.blocks[-1].attn.get_attn_gradients()\n        cam = self.model.blocks[-1].attn.get_attention_map()\n        cam = cam[0, :, 0, 1:].reshape(-1, 14, 14)\n        grad = grad[0, :, 0, 1:].reshape(-1, 14, 14)\n        grad = grad.mean(dim=[1, 2], keepdim=True)\n        cam = (cam * grad).mean(0).clamp(min=0)\n        cam = (cam - cam.min()) / (cam.max() - cam.min())\n\n        return cam\n        #################### attn\n\n    def generate_rollout(self, input, start_layer=0):\n        self.model(input)\n        blocks = self.model.blocks\n        all_layer_attentions = []\n        for blk in blocks:\n            attn_heads = blk.attn.get_attention_map()\n            avg_heads = (attn_heads.sum(dim=1) / attn_heads.shape[1]).detach()\n            all_layer_attentions.append(avg_heads)\n        rollout = compute_rollout_attention(all_layer_attentions, start_layer=start_layer)\n        return rollout[:,0, 1:]","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:11:30.219071Z","iopub.execute_input":"2024-09-24T07:11:30.219665Z","iopub.status.idle":"2024-09-24T07:11:30.243185Z","shell.execute_reply.started":"2024-09-24T07:11:30.219633Z","shell.execute_reply":"2024-09-24T07:11:30.242007Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"attribution_generator = LRP(model)","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:11:47.469708Z","iopub.execute_input":"2024-09-24T07:11:47.470112Z","iopub.status.idle":"2024-09-24T07:11:47.475533Z","shell.execute_reply.started":"2024-09-24T07:11:47.470082Z","shell.execute_reply":"2024-09-24T07:11:47.474550Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"def generate_visualization(original_image, class_index=None):\n    transformer_attribution = attribution_generator.generate_LRP(original_image.unsqueeze(0).cuda(), method=\"transformer_attribution\", index=class_index).detach()\n    transformer_attribution = transformer_attribution.reshape(1, 1, 14, 14)\n    transformer_attribution = torch.nn.functional.interpolate(transformer_attribution, scale_factor=16, mode='bilinear')\n    transformer_attribution = transformer_attribution.reshape(224, 224).data.cpu().numpy()\n    transformer_attribution = (transformer_attribution - transformer_attribution.min()) / (transformer_attribution.max() - transformer_attribution.min())\n\n    if use_thresholding:\n      transformer_attribution = transformer_attribution * 255\n      transformer_attribution = transformer_attribution.astype(np.uint8)\n      ret, transformer_attribution = cv2.threshold(transformer_attribution, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n      transformer_attribution[transformer_attribution == 255] = 1\n\n    image_transformer_attribution = original_image.permute(1, 2, 0).data.cpu().numpy()\n    image_transformer_attribution = (image_transformer_attribution - image_transformer_attribution.min()) / (image_transformer_attribution.max() - image_transformer_attribution.min())\n    vis = show_cam_on_image(image_transformer_attribution, transformer_attribution)\n    vis =  np.uint8(255 * vis)\n    vis = cv2.cvtColor(np.array(vis), cv2.COLOR_RGB2BGR)\n    return vis\n\ndef print_top_classes(predictions, **kwargs):    \n    # Print Top-5 predictions\n    prob = torch.softmax(predictions, dim=1)\n    class_indices = predictions.data.topk(5, dim=1)[1][0].tolist()\n    max_str_len = 0\n    class_names = []\n    for cls_idx in class_indices:\n        class_names.append(CLS2IDX[cls_idx])\n        if len(CLS2IDX[cls_idx]) > max_str_len:\n            max_str_len = len(CLS2IDX[cls_idx])\n    \n    print('Top 5 classes:')\n    for cls_idx in class_indices:\n        output_string = '\\t{} : {}'.format(cls_idx, CLS2IDX[cls_idx])\n        output_string += ' ' * (max_str_len - len(CLS2IDX[cls_idx])) + '\\t\\t'\n        output_string += 'value = {:.3f}\\t prob = {:.1f}%'.format(predictions[0, cls_idx], 100 * prob[0, cls_idx])\n        print(output_string)\n     ","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:13:01.929085Z","iopub.execute_input":"2024-09-24T07:13:01.929475Z","iopub.status.idle":"2024-09-24T07:13:01.942096Z","shell.execute_reply.started":"2024-09-24T07:13:01.929446Z","shell.execute_reply":"2024-09-24T07:13:01.941048Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"image = Image.open('/kaggle/working/data_split/train/FETAL BRAIN/Patient01240_Plane3_1_of_3_aug_0.png')\ndog_cat_image = transform(image)\n\nfig, axs = plt.subplots(1, 3)\naxs[0].imshow(image);\naxs[0].axis('off');\n\noutput = model(dog_cat_image.unsqueeze(0).cuda())\nprint_top_classes(output)\n\n# cat - the predicted class\ncat = generate_visualization(dog_cat_image)\n\n# dog \n# generate visualization for class 243: 'bull mastiff'\ndog = generate_visualization(dog_cat_image, class_index=243)\n\n\naxs[1].imshow(cat);\naxs[1].axis('off');\naxs[2].imshow(dog);\naxs[2].axis('off');","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:19:20.164690Z","iopub.execute_input":"2024-09-24T07:19:20.165522Z","iopub.status.idle":"2024-09-24T07:19:20.905486Z","shell.execute_reply.started":"2024-09-24T07:19:20.165484Z","shell.execute_reply":"2024-09-24T07:19:20.904204Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Top 5 classes:\n\t1 : fetal thorax   \t\tvalue = 4.784\t prob = 98.2%\n\t3 : fetal abdomen  \t\tvalue = 0.209\t prob = 1.0%\n\t0 : fetal brain    \t\tvalue = -0.565\t prob = 0.5%\n\t2 : maternal cervix\t\tvalue = -1.514\t prob = 0.2%\n\t5 : other          \t\tvalue = -1.867\t prob = 0.1%\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[32], line 12\u001b[0m\n\u001b[1;32m      9\u001b[0m print_top_classes(output)\n\u001b[1;32m     11\u001b[0m \u001b[38;5;66;03m# cat - the predicted class\u001b[39;00m\n\u001b[0;32m---> 12\u001b[0m cat \u001b[38;5;241m=\u001b[39m \u001b[43mgenerate_visualization\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdog_cat_image\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# dog \u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# generate visualization for class 243: 'bull mastiff'\u001b[39;00m\n\u001b[1;32m     16\u001b[0m dog \u001b[38;5;241m=\u001b[39m generate_visualization(dog_cat_image, class_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m243\u001b[39m)\n","Cell \u001b[0;32mIn[31], line 2\u001b[0m, in \u001b[0;36mgenerate_visualization\u001b[0;34m(original_image, class_index)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgenerate_visualization\u001b[39m(original_image, class_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m----> 2\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m \u001b[43mattribution_generator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate_LRP\u001b[49m\u001b[43m(\u001b[49m\u001b[43moriginal_image\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43munsqueeze\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcuda\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtransformer_attribution\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mclass_index\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mdetach()\n\u001b[1;32m      3\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m transformer_attribution\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m14\u001b[39m, \u001b[38;5;241m14\u001b[39m)\n\u001b[1;32m      4\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mnn\u001b[38;5;241m.\u001b[39mfunctional\u001b[38;5;241m.\u001b[39minterpolate(transformer_attribution, scale_factor\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m16\u001b[39m, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbilinear\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","Cell \u001b[0;32mIn[29], line 40\u001b[0m, in \u001b[0;36mLRP.generate_LRP\u001b[0;34m(self, input, index, method, is_ablation, start_layer)\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[1;32m     38\u001b[0m one_hot\u001b[38;5;241m.\u001b[39mbackward(retain_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m---> 40\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrelprop\u001b[49m(torch\u001b[38;5;241m.\u001b[39mtensor(one_hot_vector)\u001b[38;5;241m.\u001b[39mto(\u001b[38;5;28minput\u001b[39m\u001b[38;5;241m.\u001b[39mdevice), method\u001b[38;5;241m=\u001b[39mmethod, is_ablation\u001b[38;5;241m=\u001b[39mis_ablation,\n\u001b[1;32m     41\u001b[0m                           start_layer\u001b[38;5;241m=\u001b[39mstart_layer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1695\u001b[0m, in \u001b[0;36mModule.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1693\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m modules:\n\u001b[1;32m   1694\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m modules[name]\n\u001b[0;32m-> 1695\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m object has no attribute \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mAttributeError\u001b[0m: 'VisionTransformer' object has no attribute 'relprop'"],"ename":"AttributeError","evalue":"'VisionTransformer' object has no attribute 'relprop'","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"prev_use_thresholding = use_thresholding\nif not use_thresholding:\n  use_thresholding = True\nimage = Image.open('/kaggle/working/data_split/train/FETAL BRAIN/Patient01240_Plane3_1_of_3_aug_0.png')\ndog_cat_image = transform(image)\n\nfig, axs = plt.subplots(1, 3)\naxs[0].imshow(image);\naxs[0].axis('off');\n\noutput = model(dog_cat_image.unsqueeze(0).cuda())\nprint_top_classes(output)\n\n# cat - the predicted class\ncat = generate_visualization(dog_cat_image)\n\n# dog \n# generate visualization for class 243: 'bull mastiff'\ndog = generate_visualization(dog_cat_image, class_index=243)\n\nif not prev_use_thresholding:\n  use_thresholding = False\n\naxs[1].imshow(cat);\naxs[1].axis('off');\naxs[2].imshow(dog);\naxs[2].axis('off');\n","metadata":{"execution":{"iopub.status.busy":"2024-09-24T07:20:35.655411Z","iopub.execute_input":"2024-09-24T07:20:35.656054Z","iopub.status.idle":"2024-09-24T07:20:36.123708Z","shell.execute_reply.started":"2024-09-24T07:20:35.656011Z","shell.execute_reply":"2024-09-24T07:20:36.122511Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Top 5 classes:\n\t1 : fetal thorax   \t\tvalue = 4.784\t prob = 98.2%\n\t3 : fetal abdomen  \t\tvalue = 0.209\t prob = 1.0%\n\t0 : fetal brain    \t\tvalue = -0.565\t prob = 0.5%\n\t2 : maternal cervix\t\tvalue = -1.514\t prob = 0.2%\n\t5 : other          \t\tvalue = -1.867\t prob = 0.1%\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[33], line 15\u001b[0m\n\u001b[1;32m     12\u001b[0m print_top_classes(output)\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# cat - the predicted class\u001b[39;00m\n\u001b[0;32m---> 15\u001b[0m cat \u001b[38;5;241m=\u001b[39m \u001b[43mgenerate_visualization\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdog_cat_image\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;66;03m# dog \u001b[39;00m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;66;03m# generate visualization for class 243: 'bull mastiff'\u001b[39;00m\n\u001b[1;32m     19\u001b[0m dog \u001b[38;5;241m=\u001b[39m generate_visualization(dog_cat_image, class_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m243\u001b[39m)\n","Cell \u001b[0;32mIn[31], line 2\u001b[0m, in \u001b[0;36mgenerate_visualization\u001b[0;34m(original_image, class_index)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgenerate_visualization\u001b[39m(original_image, class_index\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m----> 2\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m \u001b[43mattribution_generator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate_LRP\u001b[49m\u001b[43m(\u001b[49m\u001b[43moriginal_image\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43munsqueeze\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcuda\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtransformer_attribution\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mclass_index\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mdetach()\n\u001b[1;32m      3\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m transformer_attribution\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m14\u001b[39m, \u001b[38;5;241m14\u001b[39m)\n\u001b[1;32m      4\u001b[0m     transformer_attribution \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mnn\u001b[38;5;241m.\u001b[39mfunctional\u001b[38;5;241m.\u001b[39minterpolate(transformer_attribution, scale_factor\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m16\u001b[39m, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbilinear\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","Cell \u001b[0;32mIn[29], line 40\u001b[0m, in \u001b[0;36mLRP.generate_LRP\u001b[0;34m(self, input, index, method, is_ablation, start_layer)\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmodel\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[1;32m     38\u001b[0m one_hot\u001b[38;5;241m.\u001b[39mbackward(retain_graph\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m---> 40\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrelprop\u001b[49m(torch\u001b[38;5;241m.\u001b[39mtensor(one_hot_vector)\u001b[38;5;241m.\u001b[39mto(\u001b[38;5;28minput\u001b[39m\u001b[38;5;241m.\u001b[39mdevice), method\u001b[38;5;241m=\u001b[39mmethod, is_ablation\u001b[38;5;241m=\u001b[39mis_ablation,\n\u001b[1;32m     41\u001b[0m                           start_layer\u001b[38;5;241m=\u001b[39mstart_layer, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1695\u001b[0m, in \u001b[0;36mModule.__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1693\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01min\u001b[39;00m modules:\n\u001b[1;32m   1694\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m modules[name]\n\u001b[0;32m-> 1695\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m object has no attribute \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mAttributeError\u001b[0m: 'VisionTransformer' object has no attribute 'relprop'"],"ename":"AttributeError","evalue":"'VisionTransformer' object has no attribute 'relprop'","output_type":"error"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 3 Axes>","image/png":"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cyHxIIQQQoi5kHgQQgghxFxIPAghhBBiLiQehBBCCDEXEg9CCCGEmAuJByGEEELMhcSDEEIIIeZC4kEIIYQQcyHxIC4rDz30EI4cOYJ4PI7bbrsNX/va117w+f/lv/wXvOY1r0E8Hsctt9yCL33pS5fpSIU4n1tuuUX3rhCQeBCXkc9//vO4++67cf/99+PrX/863vjGN+LOO+/E9vb2BZ//1a9+Fe9+97vxcz/3c/jGN76Bd7zjHXjHO96Bb3/725f5yMW1zhe+8AUAwD333KN7VwgAgclkMnmlD0JcG9x22234wR/8QXziE58AAIzHY6ytreFXf/VXce+99573/He9611otVr40z/9U3vs7/29v4dbb70Vn/zkJy/4Gb1eD71ez/5dq9Vw3XXXYX19Hdls9iKfkbhWeOtb34onnngC1WoVuVxO9664YqjX61hbW7N792IRvmjvJMQL0O/38fjjj+O+++6zx4LBIO644w489thjF3zNY489hrvvvnvqsTvvvBN//Md//Lyf8+CDD+KBBx447/G1tbWXduBCOPb29pDL5XTviisO3rsXC4kHcVnY3d3FaDTC8vLy1OPLy8v43ve+d8HXbG5uXvD5m5ubz/s5991339T/tKvVKg4fPoyTJ09e1P9wria4M9EO98JsbGzgNa95DQCgWCza47p3X3l07744jGD5e/diIPEgripisRhisdh5j+dyOf3P5UXIZrO6Rheg2Wza34PBS1cmpnv3paN798W52PeuCibFZaFUKiEUCmFra2vq8a2tLaysrFzwNSsrK3M9X4hLAe/dWXTvimsZiQdxWYhGo3jTm96ERx991B4bj8d49NFHcfvtt1/wNbfffvvU8wHgz/7sz573+UJcCqLRKG699dapx3TvimueiRCXic997nOTWCw2+cxnPjP57ne/O/nFX/zFST6fn2xubk4mk8nkve997+Tee++15//VX/3VJBwOTz72sY9Nnnzyycn9998/iUQik29961v7/sxutzu5//77J91u96Kfz9WCrtGL85/+03+ahEKhycMPP6x79/sIXaMX51JdI4kHcVn59//+30+uu+66STQanbzlLW+Z/PVf/7X97q1vfevk/e9//9Tz//AP/3By0003TaLR6OT1r3/95Itf/OJlPmIhzqJ7V4hzyOdBCCGEEHOhmgchhBBCzIXEgxBCCCHmQuJBCCGEEHMh8SCEEEKIuZB4EFc8GvP94sxzjT7zmc8gEAhM/cTj8ct4tJefv/iLv8Db3/52HDhwAIFA4AVnUJCvfOUr+IEf+AHEYjHceOON+MxnPjP35+refXF0774wr9S9K/Egrmg05vvFmfcaAWftfjc2NuznxIkTl/GILz+tVgtvfOMb8dBDD+3r+ceOHcNP/uRP4sd+7MfwxBNP4MMf/jB+/ud/Hl/+8pf3/Zm6d18c3bsvzitx7wKQSZS4snnLW94yueuuu+zfo9FocuDAgcmDDz54wef/w3/4Dyc/+ZM/OfXYbbfdNvlH/+gfXdLjfCWZ9xp9+tOfnuRyuct0dN9/AJj80R/90Qs+59d//dcnr3/966cee9e73jW588479/05undfHN2783G57t3JZDJR5EFcsXDM9x133GGP7WdUsn8+cHZU8vM9/0rnpVwj4OwwqMOHD2NtbQ3/4B/8A3znO9+5HId7xfBy7yPduy+O7t1Lw8W6jyQexBXLC435fr7Rxy9lVPKVzEu5RjfffDM+9alP4U/+5E/wn//zf8Z4PMYP/dAP4dSpU5fjkK8Inu8+qtfr6HQ6L/p63bsvju7dS8PLvXeJRnILIaa4/fbbpwY4/dAP/RBe+9rX4j/8h/+A3/qt33oFj0yIF0b37uVDkQdxxaIx3y/OS7lGs0QiEfzdv/t38eyzz16KQ7wieb77KJvNIpFIvOjrde++OLp3Lw0v994lEg/iikVjvl+cl3KNZhmNRvjWt76F1dXVS3WYVxwv9z7Svfvi6N69NFy0+2jeak4hvp94JcZ8X2nMe40eeOCByZe//OXJc889N3n88ccnP/3TPz2Jx+OT73znO6/UKVxyGo3G5Bvf+MbkG9/4xgTA5Hd+53cm3/jGNyYnTpyYTCaTyb333jt573vfa88/evToJJlMTv7ZP/tnkyeffHLy0EMPTUKh0OSRRx7Z92fq3n1xdO++OK/EvTuZaCS3uArQqOQXZ55r9OEPf9ieu7y8PPmJn/iJyde//vVX4KgvH3/+538+AXDeD6/L+9///slb3/rW815z6623TqLR6OSGG26YfPrTn577c3Xvvji6d1+YV+re1UhuIYQQQsyFah6EEEIIMRcSD0IIIYSYC4kHIYQQQsyFxIMQQggh5kLiQQghhBBzIfEghBBCiLmQeBBCCCHEXEg8CCGEEGIuJB6EEEIIMRcSD0IIIYSYC4kHIYQQQszF/w+T8xTGVCqy8wAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}